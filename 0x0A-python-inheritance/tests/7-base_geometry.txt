==========================
Testing 7-base_geometry.py
==========================

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> type(bg) == BaseGeometry
True

>>> type(BaseGeometry.__dict__['area'])
<class 'function'>

>>> bg.__class__.area()
Traceback (most recent call last):
TypeError: BaseGeometry.area() missing 1 required positional argument: 'self'

>>> bg.integer_validator("my_int", 12)

>>> bg.integer_validator("number", -10)
Traceback (most recent call last):
ValueError: number must be greater than 0

>>> bg.integer_validator("key", 0)
Traceback (most recent call last):
ValueError: key must be greater than 0

>>> bg.integer_validator("distance", 1000, 5)
Traceback (most recent call last):
TypeError: BaseGeometry.integer_validator() takes 3 positional arguments but 4 were given

>>> bg.integer_validator("number", int('inf'))
Traceback (most recent call last):
ValueError: invalid literal for int() with base 10: 'inf'

>>> bg.integer_validator("trial", {1, 2})
Traceback (most recent call last):
TypeError: trial must be an integer

>>> bg.integer_validator("trial", (1, 2))
Traceback (most recent call last):
TypeError: trial must be an integer

>>> bg.integer_validator("significant", 1)

>>> bg.integer_validator("trial", None)
Traceback (most recent call last):
TypeError: trial must be an integer

>>> bg.integer_validator(None, 1)
